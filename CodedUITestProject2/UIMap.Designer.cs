// ------------------------------------------------------------------------------
//  <auto-generated>
//      Этот код был создан построителем кодированных тестов ИП.
//      Версия: 16.0.0.0
//
//      Изменения, внесенные в этот файл, могут привести к неправильной работе кода и будут
//      утрачены при повторном формировании кода.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject2
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.31306.167")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RunApp - Используйте "RunAppParams" для передачи параметров в этот метод.
        /// </summary>
        public void RunApp()
        {

            // Запуск "%USERPROFILE%\source\repos\FGFile\FGFile\bin\Debug\netcoreapp3.1\FGFile.exe"
            ApplicationUnderTest fGFileApplication = ApplicationUnderTest.Launch(this.RunAppParams.ExePath, this.RunAppParams.AlternateExePath);
        }
        
        /// <summary>
        /// SelectFFile
        /// </summary>
        public void SelectFFile()
        {
            #region Variable Declarations
            WpfButton uIОбзорButton = this.UIMainWindowWindow.UIОбзорButton;
            WinTreeItem uIНовыйтомGTreeItem = this.UIОткрытиеWindow.UIДеревоWindow.UIРабочийстолTreeItem.UIЭтоткомпьютерTreeItem.UIНовыйтомGTreeItem;
            WinEdit uIИмяEdit = this.UIОткрытиеWindow.UIItemWindow.UIFtxtListItem.UIИмяEdit;
            WinButton uIОткрытьButton = this.UIОткрытиеWindow.UIОткрытьWindow.UIОткрытьButton;
            #endregion

            // Щелкните "Обзор" кнопка
            Mouse.Click(uIОбзорButton, new Point(15, 14));

            // Щелкните "Рабочий стол" -> "Этот компьютер" -> "Новый том (G:)" элемент дерева
            Mouse.Click(uIНовыйтомGTreeItem, new Point(47, 14));

            // Щелкните "Имя" надпись
            Mouse.Click(uIИмяEdit, new Point(51, 12));

            // Щелкните "&Открыть" кнопка
            Mouse.Click(uIОткрытьButton, new Point(50, 11));
        }
        
        /// <summary>
        /// AssertFPathBox - Используйте "AssertFPathBoxExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void AssertFPathBox()
        {
            #region Variable Declarations
            WpfEdit uIFPathBoxEdit = this.UIMainWindowWindow.UIFPathBoxEdit;
            #endregion

            // Убедитесь, что свойство Text "fPathBox" надпись равняется "G:\f.txt"
            Assert.AreEqual(this.AssertFPathBoxExpectedValues.UIFPathBoxEditText, uIFPathBoxEdit.Text, "Неверный путь");
        }
        
        /// <summary>
        /// Выбор пути g
        /// </summary>
        public void SelectGFile()
        {
            #region Variable Declarations
            WpfButton uIОбзорButton1 = this.UIMainWindowWindow.UIОбзорButton1;
            WinTreeItem uIНовыйтомGTreeItem = this.UIСохранениеWindow.UIДеревоWindow.UIРабочийстолTreeItem.UIЭтоткомпьютерTreeItem.UIНовыйтомGTreeItem;
            WinComboBox uIИмяфайлаComboBox = this.UIСохранениеWindow.UIПанельподробностейPane.UIИмяфайлаComboBox;
            WinButton uIСохранитьButton = this.UIСохранениеWindow.UIСохранитьWindow.UIСохранитьButton;
            WinButton uIДАButton = this.UIСохранениеWindow1.UIДАWindow.UIДАButton;
            #endregion

            // Щелкните "Обзор" кнопка
            Mouse.Click(uIОбзорButton1, new Point(8, 1));

            // Щелкните "Рабочий стол" -> "Этот компьютер" -> "Новый том (G:)" элемент дерева
            Mouse.Click(uIНовыйтомGTreeItem, new Point(47, 5));

            // Выберите "g" в "Имя файла:" поле со списком
            uIИмяфайлаComboBox.EditableItem = this.SelectGFileParams.UIИмяфайлаComboBoxEditableItem;

            // Щелкните "Со&хранить" кнопка
            Mouse.Click(uIСохранитьButton, new Point(64, 16));

            // Щелкните "&Да" кнопка
            Mouse.Click(uIДАButton, new Point(31, 8));
        }
        
        /// <summary>
        /// AssertGPathBox - Используйте "AssertGPathBoxExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void AssertGPathBox()
        {
            #region Variable Declarations
            WpfEdit uISaveFilePathTextEdit = this.UIMainWindowWindow.UISaveFilePathTextEdit;
            #endregion

            // Убедитесь, что свойство Text "saveFilePathText" надпись равняется "G:\g.txt"
            Assert.AreEqual(this.AssertGPathBoxExpectedValues.UISaveFilePathTextEditText, uISaveFilePathTextEdit.Text, "Путь сохранения с ошибкой");
        }
        
        /// <summary>
        /// Запуск главного метода сохранения файла
        /// </summary>
        public void RunMainFun()
        {
            #region Variable Declarations
            WpfButton uIПреобразоватьButton = this.UIMainWindowWindow.UIПреобразоватьButton;
            #endregion

            // Щелкните "Преобразовать" кнопка
            Mouse.Click(uIПреобразоватьButton, new Point(53, 8));
        }
        
        /// <summary>
        /// AssertDoneMessage - Используйте "AssertDoneMessageExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void AssertDoneMessage()
        {
            #region Variable Declarations
            WinText uIФайлуспешнозаписанText = this.UIФайлуспешнозаписанWindow.UIФайлуспешнозаписанText;
            #endregion

            // Убедитесь, что свойство FriendlyName "Файл успешно записан" надпись равняется "Файл успешно записан"
            Assert.AreEqual(this.AssertDoneMessageExpectedValues.UIФайлуспешнозаписанTextFriendlyName, uIФайлуспешнозаписанText.FriendlyName, "Нет сообщения умпешной работы");
        }
        
        /// <summary>
        /// Не возможно закрыть приложение
        /// </summary>
        public void CloseApp()
        {
            #region Variable Declarations
            WinButton uIОКButton = this.UIОКWindow.UIОКButton;
            WinButton uIЗакрытьButton = this.UIMainWindowWindow1.UIЗакрытьButton;
            #endregion

            // Щелкните "ОК" кнопка
            Mouse.Click(uIОКButton, new Point(38, 11));

            // Щелкните "Закрыть" кнопка
            Mouse.Click(uIЗакрытьButton, new Point(14, 20));
        }
        
        #region Properties
        public virtual RunAppParams RunAppParams
        {
            get
            {
                if ((this.mRunAppParams == null))
                {
                    this.mRunAppParams = new RunAppParams();
                }
                return this.mRunAppParams;
            }
        }
        
        public virtual AssertFPathBoxExpectedValues AssertFPathBoxExpectedValues
        {
            get
            {
                if ((this.mAssertFPathBoxExpectedValues == null))
                {
                    this.mAssertFPathBoxExpectedValues = new AssertFPathBoxExpectedValues();
                }
                return this.mAssertFPathBoxExpectedValues;
            }
        }
        
        public virtual SelectGFileParams SelectGFileParams
        {
            get
            {
                if ((this.mSelectGFileParams == null))
                {
                    this.mSelectGFileParams = new SelectGFileParams();
                }
                return this.mSelectGFileParams;
            }
        }
        
        public virtual AssertGPathBoxExpectedValues AssertGPathBoxExpectedValues
        {
            get
            {
                if ((this.mAssertGPathBoxExpectedValues == null))
                {
                    this.mAssertGPathBoxExpectedValues = new AssertGPathBoxExpectedValues();
                }
                return this.mAssertGPathBoxExpectedValues;
            }
        }
        
        public virtual AssertDoneMessageExpectedValues AssertDoneMessageExpectedValues
        {
            get
            {
                if ((this.mAssertDoneMessageExpectedValues == null))
                {
                    this.mAssertDoneMessageExpectedValues = new AssertDoneMessageExpectedValues();
                }
                return this.mAssertDoneMessageExpectedValues;
            }
        }
        
        public UIMainWindowWindow UIMainWindowWindow
        {
            get
            {
                if ((this.mUIMainWindowWindow == null))
                {
                    this.mUIMainWindowWindow = new UIMainWindowWindow();
                }
                return this.mUIMainWindowWindow;
            }
        }
        
        public UIОткрытиеWindow UIОткрытиеWindow
        {
            get
            {
                if ((this.mUIОткрытиеWindow == null))
                {
                    this.mUIОткрытиеWindow = new UIОткрытиеWindow();
                }
                return this.mUIОткрытиеWindow;
            }
        }
        
        public UIСохранениеWindow UIСохранениеWindow
        {
            get
            {
                if ((this.mUIСохранениеWindow == null))
                {
                    this.mUIСохранениеWindow = new UIСохранениеWindow();
                }
                return this.mUIСохранениеWindow;
            }
        }
        
        public UIСохранениеWindow1 UIСохранениеWindow1
        {
            get
            {
                if ((this.mUIСохранениеWindow1 == null))
                {
                    this.mUIСохранениеWindow1 = new UIСохранениеWindow1();
                }
                return this.mUIСохранениеWindow1;
            }
        }
        
        public UIФайлуспешнозаписанWindow UIФайлуспешнозаписанWindow
        {
            get
            {
                if ((this.mUIФайлуспешнозаписанWindow == null))
                {
                    this.mUIФайлуспешнозаписанWindow = new UIФайлуспешнозаписанWindow();
                }
                return this.mUIФайлуспешнозаписанWindow;
            }
        }
        
        public UIОКWindow UIОКWindow
        {
            get
            {
                if ((this.mUIОКWindow == null))
                {
                    this.mUIОКWindow = new UIОКWindow();
                }
                return this.mUIОКWindow;
            }
        }
        
        public UIMainWindowWindow1 UIMainWindowWindow1
        {
            get
            {
                if ((this.mUIMainWindowWindow1 == null))
                {
                    this.mUIMainWindowWindow1 = new UIMainWindowWindow1();
                }
                return this.mUIMainWindowWindow1;
            }
        }
        #endregion
        
        #region Fields
        private RunAppParams mRunAppParams;
        
        private AssertFPathBoxExpectedValues mAssertFPathBoxExpectedValues;
        
        private SelectGFileParams mSelectGFileParams;
        
        private AssertGPathBoxExpectedValues mAssertGPathBoxExpectedValues;
        
        private AssertDoneMessageExpectedValues mAssertDoneMessageExpectedValues;
        
        private UIMainWindowWindow mUIMainWindowWindow;
        
        private UIОткрытиеWindow mUIОткрытиеWindow;
        
        private UIСохранениеWindow mUIСохранениеWindow;
        
        private UIСохранениеWindow1 mUIСохранениеWindow1;
        
        private UIФайлуспешнозаписанWindow mUIФайлуспешнозаписанWindow;
        
        private UIОКWindow mUIОКWindow;
        
        private UIMainWindowWindow1 mUIMainWindowWindow1;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "RunApp"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.31306.167")]
    public class RunAppParams
    {
        
        #region Fields
        /// <summary>
        /// Запуск "%USERPROFILE%\source\repos\FGFile\FGFile\bin\Debug\netcoreapp3.1\FGFile.exe"
        /// </summary>
        public string ExePath = "C:\\Users\\WhyVilos\\source\\repos\\FGFile\\FGFile\\bin\\Debug\\netcoreapp3.1\\FGFile.exe";
        
        /// <summary>
        /// Запуск "%USERPROFILE%\source\repos\FGFile\FGFile\bin\Debug\netcoreapp3.1\FGFile.exe"
        /// </summary>
        public string AlternateExePath = "%USERPROFILE%\\source\\repos\\FGFile\\FGFile\\bin\\Debug\\netcoreapp3.1\\FGFile.exe";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "AssertFPathBox"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.31306.167")]
    public class AssertFPathBoxExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Text "fPathBox" надпись равняется "G:\f.txt"
        /// </summary>
        public string UIFPathBoxEditText = "G:\\f.txt";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "SelectGFile"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.31306.167")]
    public class SelectGFileParams
    {
        
        #region Fields
        /// <summary>
        /// Выберите "g" в "Имя файла:" поле со списком
        /// </summary>
        public string UIИмяфайлаComboBoxEditableItem = "g";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "AssertGPathBox"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.31306.167")]
    public class AssertGPathBoxExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Text "saveFilePathText" надпись равняется "G:\g.txt"
        /// </summary>
        public string UISaveFilePathTextEditText = "G:\\g.txt";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "AssertDoneMessage"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.31306.167")]
    public class AssertDoneMessageExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство FriendlyName "Файл успешно записан" надпись равняется "Файл успешно записан"
        /// </summary>
        public string UIФайлуспешнозаписанTextFriendlyName = "Файл успешно записан";
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.31306.167")]
    public class UIMainWindowWindow : WpfWindow
    {
        
        public UIMainWindowWindow()
        {
            #region Условия поиска
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfButton UIОбзорButton
        {
            get
            {
                if ((this.mUIОбзорButton == null))
                {
                    this.mUIОбзорButton = new WpfButton(this);
                    #region Условия поиска
                    this.mUIОбзорButton.SearchProperties[WpfButton.PropertyNames.Name] = "Обзор";
                    this.mUIОбзорButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIОбзорButton;
            }
        }
        
        public WpfEdit UIFPathBoxEdit
        {
            get
            {
                if ((this.mUIFPathBoxEdit == null))
                {
                    this.mUIFPathBoxEdit = new WpfEdit(this);
                    #region Условия поиска
                    this.mUIFPathBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "fPathBox";
                    this.mUIFPathBoxEdit.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIFPathBoxEdit;
            }
        }
        
        public WpfButton UIОбзорButton1
        {
            get
            {
                if ((this.mUIОбзорButton1 == null))
                {
                    this.mUIОбзорButton1 = new WpfButton(this);
                    #region Условия поиска
                    this.mUIОбзорButton1.SearchProperties[WpfButton.PropertyNames.Name] = "Обзор";
                    this.mUIОбзорButton1.SearchProperties[WpfButton.PropertyNames.Instance] = "2";
                    this.mUIОбзорButton1.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIОбзорButton1;
            }
        }
        
        public WpfEdit UISaveFilePathTextEdit
        {
            get
            {
                if ((this.mUISaveFilePathTextEdit == null))
                {
                    this.mUISaveFilePathTextEdit = new WpfEdit(this);
                    #region Условия поиска
                    this.mUISaveFilePathTextEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "saveFilePathText";
                    this.mUISaveFilePathTextEdit.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUISaveFilePathTextEdit;
            }
        }
        
        public WpfButton UIПреобразоватьButton
        {
            get
            {
                if ((this.mUIПреобразоватьButton == null))
                {
                    this.mUIПреобразоватьButton = new WpfButton(this);
                    #region Условия поиска
                    this.mUIПреобразоватьButton.SearchProperties[WpfButton.PropertyNames.Name] = "Преобразовать";
                    this.mUIПреобразоватьButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIПреобразоватьButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIОбзорButton;
        
        private WpfEdit mUIFPathBoxEdit;
        
        private WpfButton mUIОбзорButton1;
        
        private WpfEdit mUISaveFilePathTextEdit;
        
        private WpfButton mUIПреобразоватьButton;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.31306.167")]
    public class UIОткрытиеWindow : WinWindow
    {
        
        public UIОткрытиеWindow()
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Открытие";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Открытие");
            #endregion
        }
        
        #region Properties
        public UIДеревоWindow UIДеревоWindow
        {
            get
            {
                if ((this.mUIДеревоWindow == null))
                {
                    this.mUIДеревоWindow = new UIДеревоWindow(this);
                }
                return this.mUIДеревоWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIОткрытьWindow UIОткрытьWindow
        {
            get
            {
                if ((this.mUIОткрытьWindow == null))
                {
                    this.mUIОткрытьWindow = new UIОткрытьWindow(this);
                }
                return this.mUIОткрытьWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIДеревоWindow mUIДеревоWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UIОткрытьWindow mUIОткрытьWindow;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.31306.167")]
    public class UIДеревоWindow : WinWindow
    {
        
        public UIДеревоWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "100";
            this.WindowTitles.Add("Открытие");
            #endregion
        }
        
        #region Properties
        public UIРабочийстолTreeItem UIРабочийстолTreeItem
        {
            get
            {
                if ((this.mUIРабочийстолTreeItem == null))
                {
                    this.mUIРабочийстолTreeItem = new UIРабочийстолTreeItem(this);
                }
                return this.mUIРабочийстолTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIРабочийстолTreeItem mUIРабочийстолTreeItem;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.31306.167")]
    public class UIРабочийстолTreeItem : WinTreeItem
    {
        
        public UIРабочийстолTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Рабочий стол";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Открытие");
            #endregion
        }
        
        #region Properties
        public UIЭтоткомпьютерTreeItem UIЭтоткомпьютерTreeItem
        {
            get
            {
                if ((this.mUIЭтоткомпьютерTreeItem == null))
                {
                    this.mUIЭтоткомпьютерTreeItem = new UIЭтоткомпьютерTreeItem(this);
                }
                return this.mUIЭтоткомпьютерTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIЭтоткомпьютерTreeItem mUIЭтоткомпьютерTreeItem;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.31306.167")]
    public class UIЭтоткомпьютерTreeItem : WinTreeItem
    {
        
        public UIЭтоткомпьютерTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Этот компьютер";
            this.SearchProperties["Value"] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("Открытие");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIНовыйтомGTreeItem
        {
            get
            {
                if ((this.mUIНовыйтомGTreeItem == null))
                {
                    this.mUIНовыйтомGTreeItem = new WinTreeItem(this);
                    #region Условия поиска
                    this.mUIНовыйтомGTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Новый том (G:)";
                    this.mUIНовыйтомGTreeItem.SearchProperties["Value"] = "2";
                    this.mUIНовыйтомGTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIНовыйтомGTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIНовыйтомGTreeItem.WindowTitles.Add("Открытие");
                    #endregion
                }
                return this.mUIНовыйтомGTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIНовыйтомGTreeItem;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.31306.167")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Просмотр элементов";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Открытие");
            #endregion
        }
        
        #region Properties
        public UIFtxtListItem UIFtxtListItem
        {
            get
            {
                if ((this.mUIFtxtListItem == null))
                {
                    this.mUIFtxtListItem = new UIFtxtListItem(this);
                }
                return this.mUIFtxtListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFtxtListItem mUIFtxtListItem;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.31306.167")]
    public class UIFtxtListItem : WinListItem
    {
        
        public UIFtxtListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinListItem.PropertyNames.Name] = "f.txt";
            this.WindowTitles.Add("Открытие");
            #endregion
        }
        
        #region Properties
        public WinEdit UIИмяEdit
        {
            get
            {
                if ((this.mUIИмяEdit == null))
                {
                    this.mUIИмяEdit = new WinEdit(this);
                    #region Условия поиска
                    this.mUIИмяEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Имя";
                    this.mUIИмяEdit.WindowTitles.Add("Открытие");
                    #endregion
                }
                return this.mUIИмяEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIИмяEdit;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.31306.167")]
    public class UIОткрытьWindow : WinWindow
    {
        
        public UIОткрытьWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Открытие");
            #endregion
        }
        
        #region Properties
        public WinButton UIОткрытьButton
        {
            get
            {
                if ((this.mUIОткрытьButton == null))
                {
                    this.mUIОткрытьButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIОткрытьButton.SearchProperties[WinButton.PropertyNames.Name] = "Открыть";
                    this.mUIОткрытьButton.WindowTitles.Add("Открытие");
                    #endregion
                }
                return this.mUIОткрытьButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIОткрытьButton;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.31306.167")]
    public class UIСохранениеWindow : WinWindow
    {
        
        public UIСохранениеWindow()
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Сохранение";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Сохранение");
            #endregion
        }
        
        #region Properties
        public UIДеревоWindow1 UIДеревоWindow
        {
            get
            {
                if ((this.mUIДеревоWindow == null))
                {
                    this.mUIДеревоWindow = new UIДеревоWindow1(this);
                }
                return this.mUIДеревоWindow;
            }
        }
        
        public UIПанельподробностейPane UIПанельподробностейPane
        {
            get
            {
                if ((this.mUIПанельподробностейPane == null))
                {
                    this.mUIПанельподробностейPane = new UIПанельподробностейPane(this);
                }
                return this.mUIПанельподробностейPane;
            }
        }
        
        public UIСохранитьWindow UIСохранитьWindow
        {
            get
            {
                if ((this.mUIСохранитьWindow == null))
                {
                    this.mUIСохранитьWindow = new UIСохранитьWindow(this);
                }
                return this.mUIСохранитьWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIДеревоWindow1 mUIДеревоWindow;
        
        private UIПанельподробностейPane mUIПанельподробностейPane;
        
        private UIСохранитьWindow mUIСохранитьWindow;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.31306.167")]
    public class UIДеревоWindow1 : WinWindow
    {
        
        public UIДеревоWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "100";
            this.WindowTitles.Add("Сохранение");
            #endregion
        }
        
        #region Properties
        public UIРабочийстолTreeItem1 UIРабочийстолTreeItem
        {
            get
            {
                if ((this.mUIРабочийстолTreeItem == null))
                {
                    this.mUIРабочийстолTreeItem = new UIРабочийстолTreeItem1(this);
                }
                return this.mUIРабочийстолTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIРабочийстолTreeItem1 mUIРабочийстолTreeItem;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.31306.167")]
    public class UIРабочийстолTreeItem1 : WinTreeItem
    {
        
        public UIРабочийстолTreeItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Рабочий стол";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Сохранение");
            #endregion
        }
        
        #region Properties
        public UIЭтоткомпьютерTreeItem1 UIЭтоткомпьютерTreeItem
        {
            get
            {
                if ((this.mUIЭтоткомпьютерTreeItem == null))
                {
                    this.mUIЭтоткомпьютерTreeItem = new UIЭтоткомпьютерTreeItem1(this);
                }
                return this.mUIЭтоткомпьютерTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIЭтоткомпьютерTreeItem1 mUIЭтоткомпьютерTreeItem;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.31306.167")]
    public class UIЭтоткомпьютерTreeItem1 : WinTreeItem
    {
        
        public UIЭтоткомпьютерTreeItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Этот компьютер";
            this.SearchProperties["Value"] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("Сохранение");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIНовыйтомGTreeItem
        {
            get
            {
                if ((this.mUIНовыйтомGTreeItem == null))
                {
                    this.mUIНовыйтомGTreeItem = new WinTreeItem(this);
                    #region Условия поиска
                    this.mUIНовыйтомGTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Новый том (G:)";
                    this.mUIНовыйтомGTreeItem.SearchProperties["Value"] = "2";
                    this.mUIНовыйтомGTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIНовыйтомGTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIНовыйтомGTreeItem.WindowTitles.Add("Сохранение");
                    #endregion
                }
                return this.mUIНовыйтомGTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIНовыйтомGTreeItem;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.31306.167")]
    public class UIПанельподробностейPane : WinPane
    {
        
        public UIПанельподробностейPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinControl.PropertyNames.Name] = "Панель подробностей";
            this.WindowTitles.Add("Сохранение");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIИмяфайлаComboBox
        {
            get
            {
                if ((this.mUIИмяфайлаComboBox == null))
                {
                    this.mUIИмяфайлаComboBox = new WinComboBox(this);
                    #region Условия поиска
                    this.mUIИмяфайлаComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Имя файла:";
                    this.mUIИмяфайлаComboBox.WindowTitles.Add("Сохранение");
                    #endregion
                }
                return this.mUIИмяфайлаComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIИмяфайлаComboBox;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.31306.167")]
    public class UIСохранитьWindow : WinWindow
    {
        
        public UIСохранитьWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Сохранение");
            #endregion
        }
        
        #region Properties
        public WinButton UIСохранитьButton
        {
            get
            {
                if ((this.mUIСохранитьButton == null))
                {
                    this.mUIСохранитьButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIСохранитьButton.SearchProperties[WinButton.PropertyNames.Name] = "Сохранить";
                    this.mUIСохранитьButton.WindowTitles.Add("Сохранение");
                    #endregion
                }
                return this.mUIСохранитьButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIСохранитьButton;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.31306.167")]
    public class UIСохранениеWindow1 : WinWindow
    {
        
        public UIСохранениеWindow1()
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Сохранение";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("Сохранение");
            #endregion
        }
        
        #region Properties
        public UIДАWindow UIДАWindow
        {
            get
            {
                if ((this.mUIДАWindow == null))
                {
                    this.mUIДАWindow = new UIДАWindow(this);
                }
                return this.mUIДАWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIДАWindow mUIДАWindow;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.31306.167")]
    public class UIДАWindow : WinWindow
    {
        
        public UIДАWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Сохранение");
            #endregion
        }
        
        #region Properties
        public WinButton UIДАButton
        {
            get
            {
                if ((this.mUIДАButton == null))
                {
                    this.mUIДАButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIДАButton.SearchProperties[WinButton.PropertyNames.Name] = "Да";
                    this.mUIДАButton.WindowTitles.Add("Сохранение");
                    #endregion
                }
                return this.mUIДАButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIДАButton;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.31306.167")]
    public class UIФайлуспешнозаписанWindow : WinWindow
    {
        
        public UIФайлуспешнозаписанWindow()
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Файл успешно записан";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Static";
            this.WindowTitles.Add("Файл успешно записан");
            #endregion
        }
        
        #region Properties
        public WinText UIФайлуспешнозаписанText
        {
            get
            {
                if ((this.mUIФайлуспешнозаписанText == null))
                {
                    this.mUIФайлуспешнозаписанText = new WinText(this);
                    #region Условия поиска
                    this.mUIФайлуспешнозаписанText.SearchProperties[WinText.PropertyNames.Name] = "Файл успешно записан";
                    this.mUIФайлуспешнозаписанText.WindowTitles.Add("Файл успешно записан");
                    #endregion
                }
                return this.mUIФайлуспешнозаписанText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIФайлуспешнозаписанText;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.31306.167")]
    public class UIОКWindow : WinWindow
    {
        
        public UIОКWindow()
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.Name] = "ОК";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("ОК");
            #endregion
        }
        
        #region Properties
        public WinButton UIОКButton
        {
            get
            {
                if ((this.mUIОКButton == null))
                {
                    this.mUIОКButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIОКButton.SearchProperties[WinButton.PropertyNames.Name] = "ОК";
                    this.mUIОКButton.WindowTitles.Add("ОК");
                    #endregion
                }
                return this.mUIОКButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIОКButton;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "16.0.31306.167")]
    public class UIMainWindowWindow1 : WinWindow
    {
        
        public UIMainWindowWindow1()
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WinButton UIЗакрытьButton
        {
            get
            {
                if ((this.mUIЗакрытьButton == null))
                {
                    this.mUIЗакрытьButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIЗакрытьButton.SearchProperties[WinButton.PropertyNames.Name] = "Закрыть";
                    this.mUIЗакрытьButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIЗакрытьButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIЗакрытьButton;
        #endregion
    }
}
